import cron from 'node-cron';
import moment from 'moment';

let cronJob = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏

export function startCronJobs(planRepository, userRepository) {
  cronJob = cron.schedule('*/10 * * * * *', async () => { // üîÑ –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã...');

      const today = moment().startOf('day').format('YYYY-MM-DD');

      try {
          const expiredPlans = await planRepository.getExpiredPlans(today);

          if (expiredPlans.length > 0) {
              for (const plan of expiredPlans) {
                  const incompleteTasks = await planRepository.getIncompleteTasks(plan.planId, today);
                  const penaltyPoints = incompleteTasks * 15;

                  if (penaltyPoints > 0) {
                      await userRepository.deductPoints(plan.userId, penaltyPoints);
                      await planRepository.markPenaltyAsApplied(plan.planId, today);
                      console.log(`‚ùå ${penaltyPoints} –æ—á–∫–æ–≤ —Å–Ω—è—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${plan.userId}`);
                  }

                  await planRepository.markPlanAsCompleted(plan.planId);
                  console.log(`‚úÖ –ü–ª–∞–Ω ${plan.planId} –∑–∞–≤–µ—Ä—à–µ–Ω.`);
              }
              console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${expiredPlans.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.`);
          } else {
              console.log('‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.');
          }
      } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–æ–≤:', error);
      }
  }, {
      scheduled: true
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ cron-–∑–∞–¥–∞—á–∏
export function stopCronJobs() {
  if (cronJob) {
    cronJob.stop();
    console.log('üõë Cron-–∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGTERM', () => {
  console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron-–∑–∞–¥–∞—á–∏...');
  stopCronJobs();
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT –ø–æ–ª—É—á–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron-–∑–∞–¥–∞—á–∏...');
  stopCronJobs();
  process.exit(0);
});
