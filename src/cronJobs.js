import cron from 'node-cron';
import moment from 'moment';

export function startCronJobs(planRepository, userRepository) {
  cron.schedule('0 0 * * *', async () => { // üîÑ –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã...');

      const today = moment().startOf('day').format('YYYY-MM-DD');

      try {
          const expiredPlans = await planRepository.getExpiredPlans(today);

          if (expiredPlans.length > 0) {
              for (const plan of expiredPlans) {
                  // üîµ –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–¢–û–õ–¨–ö–û –ü–†–û–®–õ–´–ï –∏ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞)
                  const incompleteTasks = await planRepository.getIncompleteTasks(plan.planId, today);
                  const penaltyPoints = incompleteTasks * 15;

                  // ‚õî –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Äì —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –ø–æ–º–µ—á–∞–µ–º —à—Ç—Ä–∞—Ñ
                  if (penaltyPoints > 0) {
                      await userRepository.deductPoints(plan.userId, penaltyPoints);
                      await planRepository.markPenaltyAsApplied(plan.planId, today);
                      console.log(`‚ùå ${penaltyPoints} –æ—á–∫–æ–≤ —Å–Ω—è—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${plan.userId}`);
                  }

                  // ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
                  await planRepository.markPlanAsCompleted(plan.planId);
                  console.log(`‚úÖ –ü–ª–∞–Ω ${plan.planId} –∑–∞–≤–µ—Ä—à–µ–Ω.`);
              }
              console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${expiredPlans.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.`);
          } else {
              console.log('‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.');
          }
      } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–æ–≤:', error);
      }
  });
}

